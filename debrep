#!/usr/bin/env python3
'''
Maintain a repository of debian packages
'''

import argparse, locale, logging, sys

from dr_lib import config, index, package, utils

class ArgError(Exception):
	def __init__(self,msg):
		self._msg = msg
	def __str__(self):
		return self._msg


def addBinary(pkg, db, store, component, release):

	def searchContent(refs, checksum):
		for ref in refs:
			if ref.SHA256 == checksum: return ref.id
		return -1

	logger.debug('Got package %s', str(pkg))
	logger.debug('Add package to %s/%s', release.name, component)
	if pkg.Architecture not in release.architectures:
		print("Ignore '%s', architecture %s not in release %s"
			  % (pkt.origfile, pkg.Architecture, release.name), file=sys.stderr)
		return
	refs = db.getrefsAdd(pkg, release.id)
	id = searchContent(refs, pkg.SHA256)
	if id != -1:
		logger.debug('Package %s with given content found in repo', pkg.name)
		# The given content is already present in the repo
		# Is it already in the target release?
		if refs[0].idrel == release.id:
			logger.info("Package '%s' with given content already present",
				pkg.name)
			return
		logger.info("Package '%s' with given content already in repo. Reusing",
			pkg.name)
		filename = store.binAddRef(pkg, component, release.name)
		db.addBinaryRef(release.id, refs[0].id, component, filename)
		index.cacheDirty(release.name, component, pkg.Architecture)
		return
	isNewPkg = True
	# The given content is not present in the repo.
	# Can we add it at all? TODO: check if strict and if same version
	# already present in a release other than the target and refuse
	# Ok, we can add the package now. Do we need to replace an existing
	# package?
	# TODO: make replacement optional (but default), thus allowing several
	# versions of a package in a release. apt install will select the latest
	# version (exept if version pinning is dons).
	if len(refs) > 0 and refs[0].idrel == release.id:
		logger.debug('Need to replace %s_%s ', pkg.name, pkg.Version)
		# Yes, need to replace an existing package P_old
		# TODO: refuse if upgradeOnly
		# Is P_old referenced elsewhere?
		if searchContent(refs[1:], refs[0].SHA256) != -1:
			logger.debug('Remove %s_%s from %s but keep it in repo',
				pkg.name, pkg.Version, release.name)
			# Yes it is, remove reference from target release.
			# Package will get a new id by default
			store.binDelRef(refs)
			db.delBinaryRef(refs[0].id, release.id)
		else:
			logger.debug('Remove %s_%s from %s',
				pkg.name, pkg.Version, release.name)
			# No it is not, remove it from store and recycle the
			# package id
			store.binDelLastRef(refs[0])
			pkg.id = refs[0].id
			isNewPkg = False
	# Now do an add or replace, depending on pkg.id
	filename = store.binNewPkg(pkg, component, release.name)
	if isNewPkg:
		db.newBinary(pkg)
		db.addBinaryRef(release.id, pkg.id, component, filename)
		logger.info("Added package %s_%s to %s/%s with new id %d",
			pkg.name, pkg.Version, release.name, component, pkg.id)
	else:
		db.replaceBinary(pkg, release.id, component, filename)
		logger.info("Added package %s_%s to %s/%s under id %d",
				pkg.name, pkg.Version, release.name, component, pkg.id)
	index.cacheDirty(release.name, component, pkg.Architecture)


# The default format of the list subcommand
_defaultListFmt = r"{release}/{component} {Package} {Version} {Architecture}\n"

def argParser():
	# common parser
	com = argparse.ArgumentParser(add_help=False)
	# common options
	com.add_argument('-C', '--component')
	com.add_argument('-R', '--release')
	com.add_argument('-A', '--architecture')
	com.add_argument('-c', '--config')

	parser = argparse.ArgumentParser()
	subparsers = parser.add_subparsers()
	# action add
	add = subparsers.add_parser('add', parents=[com])
	add.add_argument('debs', nargs='+')
	add.set_defaults(impl=doAdd)
	# action del
	delete = subparsers.add_parser('del', aliases=['rm'], parents=[com])
	delete.add_argument('names', nargs='+')
	delete.set_defaults(impl=doDel)
	# action list
	list = subparsers.add_parser('list', aliases=['ls'], parents=[com])
	list.add_argument('-f', '--format', default=_defaultListFmt)
	list.add_argument('names', nargs= '*')
	list.set_defaults(impl=doList)
	# action move
	move = subparsers.add_parser('move', aliases=['mv'], parents=[com])
	move.add_argument('--tc')
	move.add_argument('--tr')
	move.add_argument('names', nargs='+')
	move.set_defaults(impl=doMove)
	return parser

def updateReleases():
	# set time locale to C so strftime outputs proper week names
	# as debian insists on RFC822 date format (sigh!)
	locale.setlocale(locale.LC_TIME, 'C')

	for release in config.releases.values():
		if index.cacheRelIsDirty(release.name):
			index.updateRelease(release, db, config)

def relidsFromArgs(rarg, noneIsEmpty=False):
	if rarg is None:
		return [] if noneIsEmpty else [config.defrelease.id]
	result = []
	for r in rarg.split(','):
		if r not in config.releases:
			raise ArgError("Unknown release '%s'" % r)
		result.append(config.releases[r].id)
	return result

def arg2list(s):
	"""Create list from argument

	Split the argument at commas. If argument is None
	create an empty list instead.
	"""
	if s is None: return []
	return s.split(',')

def doAdd(args):
	index.cacheInit(config)
	# determine release
	if args.release is None:
		release = config.defrelease
	elif args.release in config.releases:
		release = config.releases[args.release]
	else:
		raise ArgError("Unknown release '%s'" % args.release)
	logger.debug("Add package to release %s" % release.name)
	# determine component. None means it is determined by componentrules
	comp = args.component
	if comp and comp not in release.components:
		raise ArgError("Unknown component '%s' in release %s"
			% (comp, release.name))
	for fname in args.debs:
		pkg = package.getBinFromDeb(fname)
		c = comp or config.getPkgComponent(pkg.name, release)
		addBinary(pkg, db, store, c, release)
	updateReleases()


def doDel(args):
	index.cacheInit(config)
	arch = arg2list(args.architecture)
	component = arg2list(args.component)
	relids = relidsFromArgs(args.release, noneIsEmpty=False)
	for pkgid in db.listIds(arch, component, relids, args.names):
		for relid in relids:
			refs = db.delBinary(pkgid, relid)
			if len(refs) == 1 and refs[0].idrel is None:
				store.binDelLastRef(refs[0].Filename)
	updateReleases()

def doList(args):
	arch = arg2list(args.architecture)
	component = arg2list(args.component)
	relids = relidsFromArgs(args.release, noneIsEmpty=True)
	fmt = utils.decodeEscapes(args.format)
	for p in db.listBin(arch, component, relids, args.names):
		print(fmt.format_map(p),end='')

def doMove(args):
	print("Move not implemented", file=sys.stderr)



#
# -------- main -------
#
logger = logging.getLogger('main')
# TODO: depend on config
logging.basicConfig(level=logging.DEBUG)


args = argParser().parse_args()
config = config.getConfig(args)
db = config.getDb()
store = config.getStore()

args.impl(args)
db.close()

